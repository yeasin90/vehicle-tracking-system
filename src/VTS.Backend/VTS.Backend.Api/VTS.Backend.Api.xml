<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VTS.Backend.Api</name>
    </assembly>
    <members>
        <member name="M:VTS.Backend.Api.Controllers.AuthorizationController.GetTokenAsync(VTS.Backend.Infrastructure.AuthServer.Models.LoginModel)">
            <summary>
             Request a JWT token of a user from Identity Server
            </summary>
            <remarks>IdentityServer must be up and running. User must be registered in IdentityServer.<br/><br/>
            Use below credentials for trial (currently setup in IdentityServer):<br/><br/>
            User role credentials:<br/>
            Username: user1, Password: userpassword1<br/>
            Username: user2, Password: userpassword2<br/><br/>
            Admin role credentials:<br/>
            Username: admin1, Password: adminpassword1
            </remarks>
            <returns>Returns JWT token</returns>
            <param name="Username">Username of registered user in IdentityServer</param>
            <param name="Password">Password of registered user in IdentityServer</param>
        </member>
        <member name="M:VTS.Backend.Api.Controllers.VehicleTrackerController.RegisterVehicleAsync(VTS.Backend.Core.Application.Features.Vehicle.Command.RegisterVehicle.RegisterVehicleCommand)">
            <summary>
             Register a vehicle
            </summary>
            <remarks>A unique serial number (alphanumeric) must be supplied in request body.<br/>
            Every vehicle will be associated with an authenticated user or admin (from IdentityServer).<br/>
            Id of the authenticated user or admin will be retrieved from JWT bearer token.<br/>
            Both User and Admins can access this endpoint.<br/><br/>
            To get an authenticated JWT token, try the endpoint from Authorization(description of the endpoint contains credentials to use). 
            After getting response, copy <strong>access_toke</strong> value and set the token value by pressing <strong>Authorize</strong> button from SwaggerUI.
            </remarks>
            <returns>Vehicle object created in database</returns>
        </member>
        <member name="M:VTS.Backend.Api.Controllers.VehicleTrackerController.RegisterVehiclePositionAsync(VTS.Backend.Core.Application.Features.VehiclePosition.Command.RegisterPosition.RegisterPositionCommand)">
            <summary>
            Record the position of a registered vehicle
            </summary>
            <remarks>
            VehicleId, Latitude and Longitude must be supplied in request body.<br/>
            Vehicle with VehicleId must be registered in the system.
            </remarks>
            <returns>Vehicle position object created in database</returns>
        </member>
        <member name="M:VTS.Backend.Api.Controllers.VehicleTrackerController.GetCurrentPositionAsync(VTS.Backend.Core.Application.Features.VehiclePosition.Query.GetCurrentPosition.GetCurrentPositionQuery)">
            <summary>
            Retrieve the current position of a vehicle
            </summary>
            <remarks>
            Retrieves last recorded position in database for a registered vehicle.<br/>
            Only autheticated Admin can access this endpoint.<br/>
            From <strong>Authorization</strong> section, use the Admin credentials to get an access token for Admin
            </remarks>
            <param name="VehicleId">Id of a registered vehicle</param>
            <returns>Vehicle position object</returns>
        </member>
        <member name="M:VTS.Backend.Api.Controllers.VehicleTrackerController.GetPositionsAsync(VTS.Backend.Core.Application.Features.VehiclePosition.Query.GetTimeIntervalPositions.GetTimeIntervalPositionsQuery)">
            <summary>
            Retrieve the positions of a vehicle
            </summary>
            <remarks>
            Retrieve the positions of a vehicle during a certain time, in order to display their journey on a map (maps drawing is out of scope).<br/>
            Only Admin can access this endpoint.<br/>
            From <strong>Authorization</strong> section, use the Admin credentials to get an access token for Admin
            </remarks>
            <param name="VehicleId">Id of a registered vehicle</param>
            <param name="FromTimeStampInSeconds">From: time stamp in seconds</param>
            <param name="ToTimeStampInSeconds">To: time stamp in seconds</param>
            <returns>List of Vehicle position object</returns>
        </member>
    </members>
</doc>
